% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proximityFilter.R
\name{proximityFilter}
\alias{proximityFilter}
\title{Proximity based exclusion}
\usage{
proximityFilter(res_objectDetection, radius = 10)
}
\arguments{
\item{res_objectDetection}{list of objects:
\enumerate{
\item named 'centers' - containing data frame with center coordinates of
objects; three columns 'mxx' - x coordinates, 'myy' - y coordinates &
'value' - cluster number
\item named 'coordinates' - containing date frame with all labeled coordinates;
three columns 'x' - x coordinates, 'y' - y coordinates & 'value' - cluster
number (optional)
}}

\item{radius}{distance from one center in which no other centers
are allowed (in pixels)}
}
\value{
list of 4 objects:
\enumerate{
\item center coordinates of discarded objects
\item center coordinates of remaining objects
\item all coordinates of remaining objects
\item original image
}
}
\description{
To detect objects within a defined range of one another, it is necessary to
calculate their centers to determine proximity. Pairs that are too close
will be discarded. (Input can be obtained by objectDetection function)
}
\examples{
res_objectDetection <- objectDetection(beads, alpha = 0.75, sigma = 0.1)
proximityFilter(res_objectDetection, radius = 10)

# without usage of objectDetection (only centers)
mat <- matrix(0, 8, 8)
mat[3, 5] <- 1
mat[5, 2] <- 1
mat[6, 7] <- 1
mat[7, 3] <- 1
sim_img <- as.cimg(mat)
centers <- data.frame(
mxx = c(3, 5, 6, 7),
myy = c(5, 2, 7, 3),
value = c(1:4)
)
objects <- list(centers = centers)
proximityFilter(objects, radius = 3)

# Visualization
\dontrun{
res_l <- proximityFilter(res_objectDetection, radius = 10)
changePixelColor(beads, res_l$remaining.coordinates)

# without objectDetection
res_m <- proximityFilter(objects, radius = 3)
changePixelColor(sim_img, res_m$remaining.centers)
}
}
